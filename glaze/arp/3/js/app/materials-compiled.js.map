{"version":3,"sources":["materials.js"],"names":[],"mappings":"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","file":"materials-compiled.js","sourcesContent":["var Materials = (function(){\r\n\r\n    //--------------------------------------------------\r\n\r\n    var m0 = new THREE.ShaderMaterial({\r\n        uniforms: {\r\n            texture: {\r\n                type: \"t\",\r\n                value: Textures.t0\r\n            },\r\n            time: {\r\n                type: \"f\",\r\n                value: 0.0\r\n            }\r\n        },\r\n        vertexShader: document.getElementById( 'vertexShader' ).textContent,\r\n        fragmentShader: document.getElementById( 'fragmentShader' ).textContent\r\n    });\r\n\r\n    //--------------------------------------------------\r\n\r\n    var m1 = new THREE.ShaderMaterial({\r\n        uniforms: {\r\n            texture: {\r\n                type: \"t\",\r\n                value: Textures.t1\r\n            },\r\n            time: {\r\n                type: \"f\",\r\n                value: 0.0\r\n            }\r\n        },\r\n        vertexShader: document.getElementById( 'vertexShader' ).textContent,\r\n        fragmentShader: document.getElementById( 'fragmentShader' ).textContent\r\n    });\r\n\r\n    //--------------------------------------------------\r\n\r\n    var m2 = new THREE.ShaderMaterial({\r\n        uniforms: {\r\n            texture: {\r\n                type: \"t\",\r\n                value: Textures.t2\r\n            },\r\n            time: {\r\n                type: \"f\",\r\n                value: 0.0\r\n            }\r\n        },\r\n        vertexShader: document.getElementById( 'vertexShader' ).textContent,\r\n        fragmentShader: document.getElementById( 'fragmentShader' ).textContent\r\n    });\r\n\r\n    //--------------------------------------------------\r\n\r\n    var m3 = new THREE.MeshBasicMaterial({\r\n        color: 'rgb(100, 125, 100)',\r\n        morphTargets: true,\r\n        side: THREE.DoubleSide\r\n    });\r\n\r\n    //--------------------------------------------------\r\n\r\n    var m4 = new THREE.MeshBasicMaterial({\r\n        //color: 0xeee,\r\n        map: Textures.t3\r\n    });\r\n\r\n    //--------------------------------------------------\r\n\r\n    var vertexShader = [\r\n\r\n        \"uniform vec2 uvScale;\",\r\n        \"varying vec2 vUv;\",\r\n\r\n        \"void main(){\",\r\n            \"vUv = uv;\",\r\n            \"vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\",\r\n            \"gl_Position = projectionMatrix * mvPosition;\",\r\n        \"}\"\r\n\r\n    ].join(\"\\n\");\r\n\r\n    var fragmentShader = [\r\n\r\n        \"uniform float time;\",\r\n        \"uniform vec2 resolution;\",\r\n        \"varying vec2 vUv;\",\r\n\r\n        \"void main(void){\",\r\n            \"vec2 position = vUv / resolution.xy;\",\r\n            \"float red = abs(sin(position.x * position.y + time / 5.0)) + 0.5;\",\r\n            \"float green = abs(sin(position.x * position.y + time / 4.0));\",\r\n            \"float blue = abs(sin(position.x * position.y + time / 3.0));\",\r\n            \"gl_FragColor = vec4(red, green, blue, 1.0);\",\r\n        \"}\"\r\n\r\n    ].join(\"\\n\");\r\n\r\n    var m5 = new THREE.ShaderMaterial({\r\n        uniforms: {\r\n            time: {\r\n                type: \"f\",\r\n                value: 1.0\r\n            },\r\n            resolution: {\r\n                type: \"v2\",\r\n                value: new THREE.Vector2()\r\n            }\r\n        },\r\n        vertexShader: vertexShader,\r\n        fragmentShader: fragmentShader\r\n    });\r\n    m5.uniforms['resolution'].value.x = 0.5;\r\n    m5.uniforms['resolution'].value.y = 0.5;\r\n\r\n    //--------------------------------------------------\r\n\r\n    return{\r\n\r\n        m0: m0,\r\n        m1: m1,\r\n        m2: m2,\r\n        m3: m3,\r\n        m4: m4,\r\n        m5: m5,\r\n\r\n        render: function(t){\r\n            m0.uniforms['time'].value = t * 0.00005 * (SoundGrabber.getFFT()[0]/5);\r\n            m1.uniforms['time'].value = t * 0.00002 * (SoundGrabber.getFFT()[100]/5);\r\n            m2.uniforms['time'].value = t * 0.00002 * (SoundGrabber.getFFT()[150]/5);\r\n\r\n            if(SoundGrabber.getFFT()[0] !== undefined){\r\n                m5.uniforms['time'].value += SoundGrabber.getFFT()[50];\r\n                m5.uniforms['resolution'].value.x = SoundGrabber.getFFT()[50] + 0.2;\r\n                m5.uniforms['resolution'].value.y = SoundGrabber.getFFT()[100] + 0.2;\r\n            }\r\n        }\r\n    }\r\n})();"]}